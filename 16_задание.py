#Задача (Лёгкая)
#Алгоритм вычисления значения функции F(n), где n – натуральное число, задан следующими соотношениями:
#F(n) = 1 при n = 1;
#F(n) = n + F(n − 1), если n – чётно,
#F(n) = 3 × F(n − 2), если n > 1 и при этом n – нечётно.
#Чему равно значение функции F(25)?
# Сама функция
def F(n):
    if n==1: return 1
    if n%2==0: return n+F(n-1)
    if n>1 and n%2!=0: return 3*F(n-2)
    
# Основная часть программы
print(F(25))
#
#
#
#
#Задача (Продолжаем подготовку)
#Алгоритм вычисления значения функции F(n), где n – натуральное число, задан следующими соотношениями:
#F(1) = 1
#F(2) = 3
#F(n) = F(n–1) * n + F(n–2) * (n – 1) , при n > 2
#Чему равно значение функции F(8)? В ответе запишите только натуральное число.

# Сама функция
def F(n):
    if n==1: return 1
    if n==2: return 3
    if n>2: return F(n-1)*n + F(n-2)*(n-1)
    
# Основная часть программы
print(F(8))


#
#
#
#
#

#Задача(Две функции)
#Алгоритм вычисления значения функций F(n) и G(n), где n — натуральное число, задан следующими соотношениями:
#F(n) = 0, если n <= 2,
#F(n) = G(n - 2), если n > 2
# G(n) = 0, n <= 1,
# G(n) = F(n - 1) + n, если n > 1
# Чему равно значение функции F(8)? В ответе запишите только натуральное число.'

# Сами функции
def F(n):
    if n<=2: return 0
    if n>2: return G(n-2)

def G(n):
    if n<=1: return 0
    if n>1: return F(n-1)+n

# Основная часть программы
print(F(8))




# Задача (Новое веяние)
# (К. Багдасарян) Алгоритм вычисления значения функции F(n), где n – натуральное число, задан следующими соотношениями:
# F(n) = 2, если n = 1,
# F(n) = 2 · F(n – 1), если n > 1.
# Чему равно значение выражения F(1900)/2**21890 ?

from functools import lru_cache

# Используем декоратор lru_cache для кэширования результатов функции F(n)
@lru_cache(None)
def F(n):
   # Если n равно 1, то возвращаем 2
   if n == 1:
       return 2
   # Если n больше 1, то возвращаем 2 умноженное на значение функции F(n - 1)
   if n > 1:
       return 2 * F(n - 1)

# Вычисляем значения функции F(n) для всех n от 2 до 1899
for i in range(2, 1900):
   F(i)

# Выводим значение выражения F(1900)/2**21890
print(F(1900) / 2**1890)


#Задача(Новое веяние, закрепление)
# Алгоритм вычисления значения функции F(n), где n — натуральное число, задан следующими соотношениями:
# F(n) = 1 при n ≤ 2;
# F(n) = n * F(n-2), если n > 2.
# Чему равно значение выражение F(3000)/F(2996) ?

from functools import lru_cache

@lru_cache(None)
def F(n):
    if n<=2: return 1
    if n>2: return n*F(n-2)

for i in range(2, 3000):
    F(i)

print(F(3000)/F(2996))

#Задача (Вперёд к победе!)
# Алгоритм вычисления значения функции F(n), где n — натуральное число, задан следующими соотношениями:
# F(n) = 1 при n=1;
# F(n) = 2 при n=2;
# F(n) = n*(n-1) + F(n-1) + F(n-2), если n > 2.
# Чему равно значение функции F(2023) - F(2021) - 2*F(2020) - F(2019)?
from functools import lru_cache

@lru_cache(None)
def F(n):
    if n==1: return 1
    if n==2: return 2
    if n>2: return n*(n-1) + F(n-1) + F(n-2)

for i in range(2, 2023):
    F(i)

print(F(2023) - F(2021) -2*F(2020) - F(2019))


#Задача (Перебираем цикл в обратном порядке)
# Алгоритм вычисления значения функции F(n), где n – натуральное число, за-дан следующими соотношениями:
# F(n) = n при n ≥ 2025;
# F(n) = n + F(n + 2), если n < 2025.
# Чему равно значение выражения F(2020) - F(2023)?

from functools import lru_cache

@lru_cache(None)
def F(n):
    if n>=2025: return n
    if n<2025: return n+F(n+2)

for i in range(2025, 0, -1):
    F(i)

print(F(2020)-F(2023))



#Dополнительные задачи
# Задача (Количество значений
# Алгоритм вычисления значения функции F(n), где n – натуральное число, задан следующими соотношениями:
# F(n) = 2*n*n*n + 1, при n > 25
# F(n) = F(n+2) + 2*F(n+3), при n ≤ 25
# Определите количество натуральных значений n из отрезка [1; 1000], для которых значение F(n) кратно 11.

# Сама функция
def F(n):
    if n>25: return 2*n*n*n + 1
    if n<=25: return F(n+2) + 2*F(n+3)

k=0

# Перебираем диапазон
for i in range(1, 1001):
    if F(i)%11==0:
        k=k+1

print(k)





#Алгоритм вычисления значения функции F(n), где n -- натуральное число, задан следующими соотношениями:
#F(1) = 1;
#F(n) = F(n-1) • n при n > 1.
#Чему равно значение функции F(5)?

def F(n):
    if n == 1: return 1
    if n > 1: return F(n - 1) * n

print(F(5))


#Алгоритм вычисления значения функции F(n), где n - натуральное число, задан следующими соотношениями:
#F(1) = 1;
#F(n) = n + F(n - 2), если n нечётно и n > 1;
#F(n) = n • F(n - 1), если n чётно.
#Чему равно значение функции F(60)?

def F(n):
    if n == 1: return 1
    if n > 1:
        if n % 2:
            return n + F(n - 2)
        else:
            return n * F(n - 1)

print(F(60))


#Алгоритм вычисления значения функции F(n), где n - натуральное число, задан следующими соотношениями:
#F(n) = 1 + 2 n при n < 5
#F(n) = 2 (n + 1) F(n-2), если n 5 и делится на 3,
#F(n) = 2-n + 1 + F(n-1) + 2-F(n-2), если n 2 5 и не делится на 3.
#Чему равно значение функции F(15)?


def F(n):
    if n<5: return 1+2*n
    if n>=5:
        if n%3==0: return 2*(n+1)*F(n-2)
        else: return 2*n+1+F(n-1)+2*F(n-2)

print(F(15))


#Алгоритм вычисления значения функции F(n), где n - натуральное число, задан следующими соотношениями:
#F(1) = G(1) = 1
#F(n) = 2 F(n-1) + G(n-1) - 2n, если n > 1
#G(n) = F(n-1) +2 G(n-1) + n, если n > 1
#Чему равно значение F(14) + G(14)?


def F(n):
    if n ==1: return 1
    if n > 1: return 2*F(n-1)+G(n-1)-2*n

def G(n):
    if n ==1: return 1
    if n > 1: return F(n-1)+2*G(n-1)+n

print(F(14)+G(14))


#Алгоритм вычисления функций F(n) и G(n), где n - натуральное число, задан следующими соотношениями:
#F(n) = n, если n > 1000000;
#F(n) = 3n + F(5n), если n 1000000.
#G(n) = F(n) / n.
#Определите количество натуральных чисел n (включая n = 3000), для которых G(n) = G(3000).


def F(n):
    if n>1_000_000: return n
    if n<=1_000_000: return 3*n+F(5*n)

def G(n):
    return F(n)/n


k = 0
for n in range(1, 1_000_00):
    if G(n)==G(3000):
        k+=1

print(k)



#Алгоритм вычисления значения функции F(n), где n - натуральное число, задан следующими соотношениями:
#F(n) = n, при n 3
#при n > 3:
#F(n) = n + 3 + F(n-1), при чётном n;
#F(n) = n*n + F(n-2), при нечётном n;
#Определите количество натуральных значений n на отрезке [1; 1000], при которых F(n) кратно 7.



def F(n):
    if n<=3: return n
    else:
        if n%2==0: return n+3+F(n-1)
        else: return n*n+F(n-2)


k = 0

for i in range(1, 1001):
    if F(i)%7==0:
        k+=1

print(k)




#Алгоритм вычисления значения функции F(n), где n - натуральное число, задан следующими соотношениями:
#F(n) = n + 15, при n <=5
#F(n) = F(n//2) + n*n*n - 1, при чётных n > 5
#F(n) = F(n-1) + 2*n*n + 1, при нечётных n > 5
#Здесь // обозначает деление нацело. Определите количество натуральных значений n из отрезка [1; 1000], для которых значение F(n) содержит не менее двух цифр 8.


def F(n):
    if n<=5: return n+15
    else: 
        if n%2==0: return F(n//2)+n*n*n-1
        else: return F(n-1)+2*n*n+1

k = 0

for i in range(1, 1001):
    if str(F(i)).count('8')>1:
        k+=1

print(k)


#Алгоритм вычисления значения функции F(n), где n - натуральное число, задан следующими соотношениями:
#F(n) = n*n + 5*n + 4, при n > 30
#F(n) = F(n+1) + 3*F(n+4), при чётных n 30
#F(n) = 2*F(n+2) + F(n+5), при нечётных n $30
#Определите количество натуральных значений п из отрезка [1; 1000], для которых сумма цифр значения F(n) равна 27.


def F(n):
    if n > 30: return n*n + 5*n + 4
    else:
        if n%2==0: return F(n+1)+3*F(n+4)
        else: return 2*F(n+2)+F(n+5)

print(len([i for i in range(1, 1001) if sum(map(int, str(F(i))))==27]))



#Алгоритм вычисления значения функции F(n), где n - натуральное число, задан следующими соотношениями:
#F(n) = n + 3, при n $ 18
#F(n) = (n//3)*F(n//3) + n - 12, при n > 18, кратных 3
#F(n) = F(n-1) + n*n + 5, при n > 18, не кратных 3
#Здесь // обозначает деление нацело. Определите количество натуральных значений n из отрезка [1; 800], для которых все цифры значения F(n) чётные.


def F(n):
    if n<=18: return n+3
    else:
        if n%3==0: return (n//3)*F(n//3)+n-12
        else: return F(n-1)+n*n+5


k = 0
print(len([i for i in range(1,801)if all(int(x)%2==0 for x in str(F(i)))]))
#or
#for i in range(1, 801):
    #if all(int(i)%2==0 for i in str(F(i))):
        #k+=1

#print(k)







