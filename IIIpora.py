#Это файл со всеми типами решений задачь ЕГЭ по информатике

#_______________________________________________________________________________________________________________________________________________________________
#_______________________________________________________________________________________________________________________________________________________________
#_______________________________________________________________________________________________________________________________________________________________
#_______________________________________________________________________________________________________________________________________________________________
#_______________________________________________________________________________________________________________________________________________________________

# 2 задание Егэ по иноформатике
print("x y z w")
for x in range(0, 2):
    for y in range(0, 2):
        for z in range(0, 2):
            for w in range(0, 2):
                if not((x == (w or y)) or ((w <= z) and (y <= w))):
                    print(x, y, z, w)

#_______________________________________________________________________________________________________________________________________________________________
#_______________________________________________________________________________________________________________________________________________________________
#_______________________________________________________________________________________________________________________________________________________________
#_______________________________________________________________________________________________________________________________________________________________

#3 задание Егэ по информатике основные формулы
# ВПР(Искомое_значение; Диапазон_таблицы; Номер_столбца; [Тип_совпадения])
# =ВПР(D2; Товар!A:F; 3; ЛОЖЬ)
#_______________________________________________________________________________________________________________________________________________________________
#_______________________________________________________________________________________________________________________________________________________________
#_______________________________________________________________________________________________________________________________________________________________
#_______________________________________________________________________________________________________________________________________________________________

#Задние 5 егэ по информатике:
###Запись переворачиваеться
for n in range(1001):
    s = bin(n)[2:]
    if int(s[::-1], 2)==23:
        print(n)

###Справо дописываются два разряда: символы 01, если число n чётное, и 10 если нечётное

for n in range(1001):
    s = bin(n)[2:]
    if n % 2==0:
        s +='01'
    else:
        s+='10'
    if int(s,2)>138:
        print(n)
        break # потому что нужно указать минимальное число N


res = []
for n in range(1001):
    s = bin(n)[2:]
    s += str(s.count('1')%2) # складываються все цифры двоичной записи, остаток от деления суммы на 2 дописываеться в конец числа
    s += str(s.count('1') % 2) # тоже самое действие
    if int(s,2)>118:
        res.append(int(s,2)) # если нужно найти наименьшее число R. Добавляем в список и переводим в десятичную запись
print(min(res))


res = []
for n in range(1001):
    s = bin(n)[2:]
    if n %3 == 0:
        s +=s [-2:] # Берём число с конца, предпоследний и до конца. Например из числа 1001011 берём 11 и дописываем в конец
    else:
        s+=bin(n%3*3)[2:] # Остаток от деления умножаеться на 3 и переводиться в двоичную систему и дописываеться в конец числа
    if int(s, 2)>=195:
        res.append(int(s,2))
print(min(res)) # Потому что опять нужно найти минамальное число R


for n in range(10001):
    s = bin(n)[2:]
    s+=bin(7)[2:] if n %7 == 0 else '1' # К s дописываем двоичный код числа 7, если делиться на 7, если не делиться дописываем 1
    #можно по другому
    # if n%7==0:
    #     s+=bin(7)[2:]
    # else:
    #     s+='1'
    i = int(s,2) # делаем новую переменную и переводим в 10-ную систему
    s += bin(5)[2:] if i % 5 == 0 else '1' # К s дописываем двоичный код числа 5, если делиться на 5, если не делиться дописываем 1
    if int(s,2)>500000: # Число R больше 500000
        print(n) # Потому что наименьшее N, ничего больше не надо, они идут по порядку
        break # если в результате нет ответа и не вышла ошибка, нужно увеличить диапазон range(10000)

def f(n): #Создаём функциию для перевода в 12-ти-ричную систему
    stroka = '0123456789AB' # Строка с числами которые можут в быть в 12-ти-ричной системе
    if n<12: return stroka[n] #возращаем элемент. Если n=5, вернём 5
    return f(n//12)+stroka[n%12] #если условие не выполнено, передаём функцию кроме последней цифры  12-ти-ричной записи числа + последняя цифра 12-ти-ричной записи числа
res = []
for n in range(144, 1000): # условие задачи, N должно быть больше 143, счёт начинаем с 144
    s = f(n)
    if n %12==0: s+=s[-3:]
    else: s = f(n % 12 * 3) + s # остаток от деления умножаеться на 3, переводиться в 12-ти-ричную запись и дописываеться в начало числа
    if int(s,12)<58000:
        res.append((int(s,12), n)) # первый элемент, результат работы, второй число N
print(sorted(res, reverse=True)[0]) #сортируем список по убыванию, т.к нужно наибольшее значение, выводим элемент с индексом ноль, тоесть самый первый и самый большой Получаем R и N

summa = 0
for n in range(10000,100000): # Пятизначное натуральное число, последнее 999999
    s = oct(n)[2:] # Перевод в восмиричную запись числа
    for _ in range(2): # повторяем всё это 2 раза
        for c in '1357': s = s.replace(c, '2') # Все нечётные цифры, а в восмиричной это 1357, заменяються на 2, функциия replac
        s+= str(n%8) # к строке дописывается остаток от деления на 8
    if int(s,8)%2023 ==0: # переводим из восмиричной в десятичную, проверяем чтобы число делилось на 2023, если делиться к summe т.е к нулю, добовляем n и в ответе получаем сумму всех таких чисел
        summa +=n
print(summa)

#_______________________________________________________________________________________________________________________________________________________________
#_______________________________________________________________________________________________________________________________________________________________
#_______________________________________________________________________________________________________________________________________________________________
#_______________________________________________________________________________________________________________________________________________________________
#_______________________________________________________________________________________________________________________________________________________________

#8 задание Егэ по информатике
#Шифр кодового замка представляет собой последовательность из пяти символов, каждый из которых является цифрой от 1 до 4.
#  Сколько различных вариантов шифра можно задать, если известно, что цифра 1 встречается ровно два раза,
#  а каждая из других допустимых цифр может встречаться в шифре любое количество раз или не встречаться совсем?
from itertools import product 
alphabet = '1234'
ap=[]
for i in product(alphabet, repeat=5):    
    if i.count('1') == 2:
        ap.append(i)
print(len(ap))

#Составляют 5-⁠буквенные слова из букв слова ПЯТНИЦА. 
#Найти количество слов, которые не начинаются с Н и в которых есть только одна буква Я.
#Буквы в слове могут повторяться.
from itertools import product
count = 0
for p in product("ПЯТНИЦА", repeat=5):
    if p.count("Я") == 1 and p[0]!="Н":
        count+=1
print(count)

#Сколько существует чисел, восьмеричная запись которых содержит 5 цифр, причем в записи нет цифры 1. 
# Также все цифры записи различны и никакие две чётные и две нечётные цифры не стоят рядом.

from itertools import *
word = '0234567'
count = 0
for i in permutations(word,5):
    x = ''.join(i)
    if x[0] != '0':
        x = x.replace('7','1').replace('5','1').replace('3','1').replace('6','0').replace('4','0').replace('2','0')
        if ('00' not in x) and ('11' not in x):
            count += 1
print(count)


#Все 5-буквенные слова, в составе которых могут быть буквы А, Л, Г, О, Р, И, Т, М, записаны в алфавитном порядке и пронумерованы начиная с 1.

#Определите в этом списке количество слов с нечетными номерами,
#  которые не начинаются с буквы Г и при этом содержат в своей записи не менее двух букв И.

from itertools import product
count = 0
number = 0
for p in product(sorted("АЛГОРИТМ"), repeat=5):
    number += 1
    if number % 2 != 0 and p[0]!="Г" and p.count("И") >= 2:
        count+=1
print(count)

#Сколько существует десятичных чисел, которые делятся на 5, при условии что все цифры числа различные?
from itertools import permutations
word = '0123456789'
c = 0
for j in range(1,11):
    for i in permutations(word,j):
        x = ''.join(i)
        if x[0] != '0' and (x[-1] == '5' or x[-1] == '0'):
            c += 1
print(c + 1) #+1 случай когда число равно 0

#Джон составляет список всех возможных кодов, составленных из заглавных латинских букв.
#  Сначала он выписывает в алфавитном порядке все коды, состоящие из одного символа (A, B, …, Z),
#  затем  — тоже в алфавитном порядке  — коды из двух символов (AA, AB, …, AZ, BA, BB, … ZZ),
#  далее идут трёхсимвольные коды (AAA, AAB, …, ZZZ) и так далее.

#Под каким номером окажется в этом списке код FDECBA?

from itertools import product
 
count = 1
alf = sorted('QWERTYUIOPASDFGHJKLZXCVBNM')
for n in range(1,7):
    for i in product(alf,repeat = n):
        if "".join(i)=="FDECBA":
            print(count)
            break
        count += 1
#_______________________________________________________________________________________________________________________________________________________________
# #_______________________________________________________________________________________________________________________________________________________________ 
#_______________________________________________________________________________________________________________________________________________________________
#_______________________________________________________________________________________________________________________________________________________________
#_______________________________________________________________________________________________________________________________________________________________
#_______________________________________________________________________________________________________________________________________________________________


 #9 задание егэ по информатике
 #=СЧЁТЕСЛИ($A1:$E1; A1)
 #=СЧЁТЕСЛИ(F1:J1;1)
 #=(МИН(A1:E1) + МАКС(A1:E1))*2
 #=ЕСЛИ(И(K1=5;N1=1);1;0)


 #_______________________________________________________________________________________________________________________________________________________________
 #_______________________________________________________________________________________________________________________________________________________________
 #_______________________________________________________________________________________________________________________________________________________________
 #_______________________________________________________________________________________________________________________________________________________________
 #_______________________________________________________________________________________________________________________________________________________________
 #_______________________________________________________________________________________________________________________________________________________________


 #12 задание егэ по информатике
 # Какая строка получится в результате применения приведённой ниже программы к строке, состоящей из 68 идущих подряд цифр 8? В ответе запишите полученную строку.

# НАЧАЛО

## ПОКА нашлось (222) ИЛИ нашлось (888)

# #   ЕСЛИ нашлось (222)

#        ТО заменить (222, 8)

#        ИНАЧЕ заменить (888, 2)

#   КОНЕЦ ЕСЛИ

# КОНЕЦ ПОКА

#КОНЕЦ

s='8'*68
while ('222' in s) or ('888' in s):
    if ('222' in s): 
        s=s.replace ('222','8',1)
    else:
        s=s.replace ('888','2',1)
print(s)

#Какая строка получится в результате применения приведённой ниже программы к строке, состоящей из цифры 1, за которой следуют 80 идущих подряд цифр 8? В ответе запишите полученную строку.

#НАЧАЛО

#  ПОКА нашлось (18) ИЛИ нашлось (288) ИЛИ нашлось (3888)

#    ЕСЛИ нашлось (18)

##      ТО заменить (18, 2)

#      ИНАЧЕ ЕСЛИ нашлось (288)

#        ТО заменить (288, 3)

#        ИНАЧЕ заменить (3888, 1)

#      КОНЕЦ ЕСЛИ

#    КОНЕЦ ЕСЛИ

#  КОНЕЦ ПОКА

#КОНЕЦ

s = '1' + '8' * 80
while '18' in s or '288' in s or '3888' in s:
    if '18' in s:
        s = s.replace('18','2',1)
    elif '288' in s:
        s = s.replace('288','3',1)
    else:
        s = s.replace('3888', '1',1)
print(s)




#Пример решения задачи через прогу
#Напишите сумму цифр строки, полученной в результате применения приведённой
#ниже программы к строке: 5 . . . 5

#НАЧАЛО
#ПОКА нашлось(5) ИЛИ нашлось(77) ИЛИ нашлось(222)
#ЕСЛИ нашлось(5)
#ТО заменить(5, 77)
#ИНАЧЕ ЕСЛИ нашлось(77)
#ТО заменить(77, 7)
#ИНАЧЕ ЕСЛИ нашлось(222)
#ТО заменить(222, 5)
#КОНЕЦ ЕСЛИ
#КОНЕЦ ПОКА
#КОНЕЦ
#Решение.

s = '5' * 10 + '7' * 30 + '2' * 50  # задаём строку

while s.find('5') != -1 or s.find('77') != -1 or s.find('222') != -1:
    # while - пока
    # s.find(s1) - находит индекс первого вхождения строки s1 в s
    # если не нашёл - возвращает -1
    if s.find('5') != -1:
        s = s.replace('5', '77', 1)
        # s.replace(s1, s2, 1) заменяет первое вхождение s1 в s на s2
    elif s.find('77') != -1:
        s = s.replace('77', '7', 1)
    elif s.find('222') != -1:
        s = s.replace('222', '5', 1)

print(sum(int(digit) for digit in s))

#_______________________________________________________________________________________________________________________________________________________________
#_______________________________________________________________________________________________________________________________________________________________
#_______________________________________________________________________________________________________________________________________________________________

#13 задание егэ по информатике
#В терминологии сетей TCP/IP маской сети называют двоичное число, которое показывает, 
#какая часть IP-адреса узла сети относится к адресу сети, а какая – к адресу узла в этой сети. 
# Адрес сети получается в результате применения поразрядной конъюнкции к заданному адресу узла и маске сети.
#Сеть задана IP-адресом 192.168.32.160 и маской сети 255.255.255.240. Сколько в этой сети IP-адресов, для которых сумма единиц в двоичной записи IP-адреса чётна?

#В ответе укажите только число.

from ipaddress import *

def F(ip):
    res=''
    a = str(ip).split('.')
    for s in a:
        res = res + format(int(s), 'b').zfill(8)
    return res

k=0

net = ip_network('192.168.32.160/255.255.255.240', 0)

for ip in net:
    if F(ip).count('1')%2==0:
        k += 1

print(k)



#В терминологии сетей TCP/IP маской сети называют двоичное число, которое показывает, какая часть IP-адреса узла сети относится к адресу сети,
#  а какая – к адресу узла в этой сети. Адрес сети получается в результате применения поразрядной конъюнкции к заданному адресу узла и маске сети.

#Сеть задана IP-адресом 253.112.169.12 и маской сети 255.255.254.0. 
# Сколько в этой сети IP-адресов, для которых в двоичной записи IP-адреса
#  суммарное количество единиц в правых двух байтах не менее суммарного количества единиц в левых двух байтах.

from ipaddress import *

def F(ip):
    res=''
    a = str(ip).split('.')
    for s in a:
        res = res + format(int(s), 'b').zfill(8)
    return res

k=0

net = ip_network('253.112.169.12/255.255.254.0', 0)

for ip in net:
    s = F(ip)
    if s[:16].count('1') <= s[16:].count('1'):
        k += 1

print(k)

#Задача (Минимальный байт маски)
#В терминологии сетей TCP/IP маской сети называется двоичное число, определяющее, какая часть IP-адреса узла сети относится к адресу сети,
#  а какая - к адресу самого узла в этой сети. Обычно маска записывается по теме же правилам, что и IP-адрес - в виде четырёх байтов,
#  причём каждый байт записывается в виде десятичного числа. При этом в маске сначала (в старших разрядах) стоят единицы, а затем с некоторого разряда - нули. 
# Адрес сети получается в результате применения поразрядной конъюнкции к заданному IP-адресу узла и маске.
#Например, если IP-адрес узла равен 231.32.255.131, а маска равна 255.255.240.0, то адрес сети равен 231.32. 240.0.
#Для узла с IP-адресом 111.81.88.168 адрес сети равен 111.81.88.160.
#Найдите наименьшее значение последнего байта маски. Ответ запишите в виде десятичного числа.

from ipaddress import *

ip = ip_address('111.81.88.168')

for mask in range(31):
    net = ip_network(f'{ip}/{mask}', 0)
    if net[0] < ip < net[-1]:
        print(net, net.netmask)


#Задача (Максимальное количество единиц в маске)
#В терминологии сетей TCP/IP маской сети называется двоичное число, определяющее, какая часть IP-адреса узла сети относится к адресу сети,
#  а какая – к адресу самого узла в этой сети. При этом в маске сначала (в старших разрядах) стоят единицы, а затем с некоторого места – нули. 
# Обычно маска записывается по тем же правилам, что и IP-адрес – в виде четырёх байтов, причём каждый байт записывается в виде десятичного числа.
#  Адрес сети получается в результате применения поразрядной конъюнкции к заданному IP-адресу узла и маске.

#Например, если IP-адрес узла равен 231.32.255.131, а маска равна 255.255.240.0, то адрес сети равен 231.32.240.0.
#Для узла с IP-адресом 93.138.70.47 адрес сети равен 93.138.64.0. 
# Каково наибольшее возможное общее количество единиц во всех четырёх байтах маски? Ответ запишите в виде десятичного числа.
from ipaddress import *

ip = ip_address('93.138.70.47')

for mask in range(31):
    net = ip_network(f'{ip}/{mask}', 0)
    if net[0] < ip < net[-1]:
        print(net)

#Задача (Количество адресов компьютеров)
#В терминологии сетей TCP/IP маской подсети называется 32-разрядное двоичное число, определяющее, какие именно разряды IP-адреса компьютера
#  являются общими для всей подсети – в этих разрядах маски стоит 1. Обычно маски записываются в виде четверки десятичных чисел – по тем же правилам, что и IP-адреса. 
#Для некоторой подсети используется маска 255.255.248.0. 
# Сколько различных адресов компьютеров допускает эта маска?
from ipaddress import *
net = ip_network('0.0.0.0/255.255.248.0')
print(net.num_addresses - 2)

#Задача (Количество масок)
#В терминологии сетей TCP/IP маска сети – это двоичное число, меньшее 232; в маске сначала (в старших разрядах) стоят единицы, а затем с некоторого места нули. 
# Маска определяет, какая часть IP-адреса узла сети относится к адресу сети, а какая – к адресу самого узла в этой сети.
#  Обычно маска записывается по тем же правилам, что и IP-адрес – в виде четырёх байт, причём каждый байт записывается в виде десятичного числа.
#  Адрес сети получается в результате применения поразрядной конъюнкции к заданному IP-адресу узла и маске.
#Для узла c IP-адресом 175.122.80.13 адрес подсети равен 175.122.80.0. 
#Сколько существует различных возможных значений маски, если известно, что в этой сети не менее 60 узлов? Ответ запишите в виде десятичного числа.
from ipaddress import *

ip = ip_address('175.122.80.13')

for mask in range(31):
    net = ip_network(f'{ip}/{mask}', 0)
    if net[0] < ip < net[-1]:
        print(net)
#or 
from ipaddress import *

ip = ip_address('175.122.80.13')

for mask in range(31):
    net = ip_network(f'{ip}/{mask}', 0)
    if net[0] < ip < net[-1]:
        if net.num_addresses - 2 >= 60:
            print(net)

#Задача (Порядковый номер компьютера)
#Маской подсети называется 32-разрядное двоичное число, которое определяет, какая часть IP-адреса компьютера относится к адресу сети, а какая часть IP-адреса определяет адрес компьютера в подсети. 
# В маске подсети старшие биты, отведенные в IP-адресе компьютера для адреса сети, имеют значение 1; младшие биты, отведенные в IP-адресе компьютера для
# адреса компьютера в подсети, имеют значение 0.

#Если маска подсети 255.255.255.224 и IP-адрес компьютера в сети 162.198.0.157, то порядковый номер компьютера в сети равен_____
#Решение:
#В этой задаче ключевой фразой является: "порядковый номер компьютера". Нужно знать, как решать данную тренировочную задачу из ЕГЭ по информатике.

#Первые 3 слева байты маски равны 255 (111111112), значит, они не участвуют в решении этой задачи.

#Мы фокусируем внимание на том байте IP-адреса, под которым байт маски имеет не все единицы в своих разрядах.

##Переведём числа 224 и 157 в двоичную систему.

#Число 224 в двоичной системе равно 111000002.

#Число 157 в двоичной системе равно 100111012.

#Запишем друг под другом данные числа в двоичной системе

#ЕГЭ по информатике - Задание 13 (Порядковый номер компьютера)

#Выписываем ту часть IP-адреса, которая находится над нулями.

#Нужно перевести это двоичное число 111012 в десятичную систему, это и будет ответ. Получается число 29

#Примечание:
#Предположим IP адрес будет 162.198.157.10, а маска подсети 255.255.224.0, тогда запишем байты IP-адреса, а под ними байты маски:

#10011101 00001010
#11100000 00000000
#о берём всё равно ту часть ip-адреса, которая находится над нулями! Не ограничиваемся 8-ю разрядами!
#11101000010102 = 7434
#Данную задачу лучше решать вручную без использования ipaddress.

#Задача (Параметр A в маске)
#В терминологии сетей TCP/IP маской сети называют двоичное число, которое показывает, какая часть IP-адреса узла сети относится к адресу сети, 
# а какая – к адресу узла в этой сети. 
#Адрес сети получается в результате применения поразрядной конъюнкции к заданному адресу узла и маске сети.

#Сеть задана IP-адресом 255.211.33.160 и маской сети 255.255.A.0, где A - некоторое допустимое для записи маски число. 
# Определите минимальное значение A, для которого для всех IP-адресов этой сети в двоичной записи IP-адреса суммарное количество единиц в левых двух байтах не менее 
# суммарного количества единиц в правых двух байтах.
from ipaddress import *

def F(ip):
    res=''
    a = str(ip).split('.')
    for s in a:
        res = res + format(int(s), 'b').zfill(8)
    return res

for i in range(9):

    A_bin = i * '1'

    while len(A_bin)<8:
        A_bin = A_bin + '0'

    A = int(A_bin, 2)
    
    net = ip_network(f'255.211.33.160/255.255.{A}.0', 0) #Заменять тут ответ будет первое число
    flag = 1
    for ip in net:
        s = F(ip)
        if s[:16].count('1') < s[16:].count('1'):
            flag=0
            break
    if flag==1:
        print(A)


#Задача (Параметр A в IP-адресе)
#В терминологии сетей TCP/IP маской сети называют двоичное число, которое показывает, 
##какая часть IP-адреса узла сети относится к адресу сети, а какая – к адресу узла в этой сети. 
#Адрес сети получается в результате применения поразрядной конъюнкции к заданному адресу узла и маске сети.
#Сеть задана IP-адресом 32.0.A.5, где A - некоторое допустимое для записи IP-адреса число, и маской сети 255.255.240.0. Определите минимальное значение A, 
# для которого для всех IP-адресов
#этой сети в двоичной записи IP-адреса суммарное количество единиц в левых двух байтах не более суммарного количества единиц в правых двух байтах.

from ipaddress import *

def F(ip):
    res=''
    a = str(ip).split('.')
    for s in a:
        res = res + format(int(s), 'b').zfill(8)
    return res

for A in range(256):
    
    net = ip_network(f'32.0.{A}.5/255.255.240.0', 0) #Заменять тут
    flag = 1
    for ip in net:
        s = F(ip)
        if s[:16].count('1') > s[16:].count('1'):
            flag=0
            break
    if flag==1:
        print(A)
        break
#Ещё одна такакя задача
def count_ones(ip):
    binary_ip = ''.join(format(int(octet), '08b') for octet in ip.split('.'))
    return binary_ip.count('1')

def find_min_a():
    a = 0
    while True:
        ip = f'192.214.{a}.184'
        mask = '255.255.255.224'
        network = '.'.join(str(int(ip_octet) & int(mask_octet)) for ip_octet, mask_octet in zip(ip.split('.'), mask.split('.')))
        if count_ones(network) > 15:
            return a
        a += 1

print(find_min_a())

#_____________________________________________________________
#___________________________________________________________

#Задача 14 (ЕГЭ по информатике, 2024)
#Значение арифметического выражения 3100 - x, где х — целое положительное число, не превышающее 2030, записали в троичной системе счисления. 
# Определите наибольшее значение х, при котором в троичной записи числа, являющегося значением данного арифметического выражения, содержится ровно пять нулей.
#В ответе запишите число в десятичной системе счисления.
for x in range(1, 2031):
    
    f = 3**100 - x
    #Счётчик нулей в троичной системе
    k=0

    #Перебираем цифры в троичной системе
    while f>0:
        if f%3==0:
            k += 1
        f = f // 3   
    
    if k==5:
        print(x)

#Задача (Классика)
#Значение выражения 536 + 524 - 25 записали в системе счисления с основанием 5. Сколько цифр "4" содержится в этой записи?
f = 5**36 + 5**24 - 25
k=0

while f>0:
    if f%5==4:
        k += 1
    f = f // 5

print(k)

#Задача (Классика, количество цифр, превышающих 9)
#Определите количество цифр с числовым значением, превышающим 9, в 27-ричной записи числа, заданного выражением:
#  2∙7292014 + 2∙2432016 - 2∙812018 + 2∙272020 - 2∙92022 - 2024.
f = 2*729**2014 + 2*243**2016 - 2*81**2018 + 2*27**2020 - 2*9**2022 - 2024
k=0

while f>0:
    if f%27 > 9:
        k += 1
    f = f // 27

print(k)

#Задача (Классика, сумма цифр)
#Значение арифметического выражения 51∙712 - 73 - 22 записали в системе счисления с основанием 7. 
# В этой записи найдите сумму цифр с числовым значением, превышающим 3.

f = 51*7**12 - 7**3 - 22
sm = 0

while f>0:
    if f%7 > 3:
        sm = sm + (f%7)
    f = f // 7

print(sm)

#Задача (Классика, второй тип)
#В выражении 1xBAD16 + 2CxFE16 x обозначает некоторую цифру из алфавита шестнадцатеричной системы счисления. 
# Определите наименьшее значение x, при котором значение данного выражения кратно 15. 
# Для найденного x вычислите частное от деления данного выражения на 15 и запишите его в ответе в десятичной системе счисления.

for x in range(0, 16):
    a=13*16**0 + 10*16**1 + 11*16**2 + x*16**3 + 1*16**4
    b=14*16**0 + 15*16**1 + x*16**2 + 12*16**3 + 2*16**4
    if (a+b)%15==0:
        print(x, (a+b)//15)


def find_x():
    x = 0
    while True:
        # Преобразуем шестнадцатеричные числа в десятичные
        num1 = int('1' + hex(x)[2:] + 'BAD', 16)
        num2 = int('2C' + hex(x)[2:] + 'FE', 16)
        # Проверяем, является ли сумма чисел кратной 15
        if (num1 + num2) % 15 == 0:
            # Если да, возвращаем частное от деления суммы на 15
            return (num1 + num2) // 15
        # Если нет, увеличиваем значение x на 1 и повторяем цикл
        x += 1

# Выводим результат на экран
print(find_x())

#Задача(Классика, второй тип, закрепление)
#Операнды арифметического выражения записаны в системе счисления с основанием 17:
#9759x17 + 3x10817
#В записи чисел переменной x обозначена неизвестная цифра из алфавита 17-ричной системы счисления. 
#Определите наименьшее значение x, при котором значение данного арифметического выражения кратного 11. 
# Для найденного значения x вычислите частное от деления значения арифметического выражения на 11 и укажите его в ответе в десятичной системе счисления. 
# Основание системы счисления в ответе указывать не нужно.
for x in range(0, 17):
    a=x*17**0 + 9*17**1 + 5*17**2 + 7*17**3 + 9*17**4
    b=8*17**0 + 0*17**1 + 1*17**2 + x*17**3 + 3*17**4
    if (a+b)%11==0:
        print(x, (a+b)//11)

def find_x():
    x = 0
    while True:
        # Преобразуем числа из 17-ричной системы счисления в десятичную
        num1 = int('9759' + str(x), 17)
        num2 = int('3' + str(x) + '108', 17)
        # Проверяем, является ли сумма чисел кратной 11
        if (num1 + num2) % 11 == 0:
            # Если да, возвращаем частное от деления суммы на 11
            return (num1 + num2) // 11
        # Если нет, увеличиваем значение x на 1 и повторяем цикл
        x += 1

# Выводим результат на экран
print(find_x())



#Задача (Классика, второй тип, две переменные)
#Числа M и N записаны в системах счисления с основаниями 15 и 13 соответственно.

#M = 2y23x515, N = 67x9y13
#В записи чисел переменными x и y обозначены допустимые в данных системах счисления неизвестные цифры. 
#Определите наименьшее значение натурального числа A, при котором существуют такие x, y, что M + A кратно N.
for A in range(1, 5000):
    for x in range(0, 13):
        for y in range(0, 13): 
            M=5*15**0 + x*15**1 + 3*15**2 + 2*15**3 + y*15**4 + 2*15**5
            N=y*13**0 + 9*13**1 + x*13**2 + 7*13**3 + 6*13**4
            if (M+A)%N==0:
                print(A)



#Задача (Уравнение)
#Чему равно наименьшее основание позиционной системы счисления x, при котором 225x = 405y? Ответ записать в виде целого числа.
for x in range(2, 1000):
    for y in range(2, 1000):
        a = 5*x**0 + 2*x**1 + 2*x**2
        b = 5*y**0 + 0*y**1 + 4*y**2
        if a == b: 
            print(x)


#Операнды арифметического выражения записаны в системе счисления с основание 18:
#11Hx05 18 + 3Fx54x8 18 + Gxxx9 18
#где x неизвестная цифра из алфавита 18-ричной системы счисления. Найдите наименьшее значение x при котором результат выражения кратен 14.
#  Для найденного x вычислите частное от деления значения арифметического выражения на 14 и укажите его в ответе в десятичной системе счисления.

#Основание системы счисления указывать не нужно.
for x in '0123456789ABCDEFGH':
    a = int(f'11H{x}05', 18) + int(f'3F{x}54{x}8', 18) + int(f'G{x}{x}{x}9', 18)
    if a % 14 == 0:
        print(x, a // 14)